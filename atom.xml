<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-28T14:28:03.660Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/10/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/10/28/设计模式之发布订阅模式/</id>
    <published>2018-10-28T13:44:56.177Z</published>
    <updated>2018-10-28T14:28:03.660Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><p>发布—订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。在 JavaScript 开发中，我们一般用事件模型来替代传统的发布—订阅模式。</p><h3 id="2-现实例子"><a href="#2-现实例子" class="headerlink" title="2. 现实例子"></a>2. 现实例子</h3><p>买房者订阅售楼处房产消息，当有新的楼盘推出时，售楼处会一一向已订阅的买房者发送消息，无需买房者每天来咨询是否有新的楼盘，售楼处也无需关注买房者的任何情况，只是负责发送消息。</p><h3 id="3-特点"><a href="#3-特点" class="headerlink" title="3. 特点"></a>3. 特点</h3><p>从上面的例子中可以看出使用发布—订阅模式有着显而易见的优点.</p><ol><li>购房者不用再天天给售楼处打电话咨询开售时间，在合适的时间点，售楼处作为发布者会通知这些消息订阅者。这一点说明发布—订阅模式可以广泛应用于异步编程中，这是一种替代传递回调函数的方案。<br>比如，我们可以订阅 ajax 请求的 error、succ 等事件。在异步编程中<br>使用发布—订阅模式，我们就无需过多关注对象在异步运行期间的内部状态，而只需要订阅感兴趣的事件发生点。<ol start="2"><li>购房者和售楼处之间不再强耦合在一起，当有新的购房者出现时，他只需把联系方式留在售楼处，售楼处不关心购房者的任何情况只要售楼处记得发短信这件事情。这说明发布—订阅模式可以取代对象之间硬编码的通知机制，一个对象不用再显式地调用另外一个对象的某个接口。发布—订阅模式让两个对象松耦合地联系在一起，虽然不太清楚彼<br>此的细节，但这不影响它们之间相互通信。当有新的订阅者出现时，发布者的代码不需要任何修<br>改；同样发布者需要改变时，也不会影响到之前的订阅者。只要之前约定的事件名没有变化，就可以自由地改变它们。</li></ol></li></ol><h3 id="4-js事件机制中的发布订阅模式"><a href="#4-js事件机制中的发布订阅模式" class="headerlink" title="4. js事件机制中的发布订阅模式"></a>4. js事件机制中的发布订阅模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener( <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//订阅消息 </span></span><br><span class="line">    alert(<span class="number">2</span>); </span><br><span class="line">&#125;, <span class="literal">false</span> ); </span><br><span class="line"><span class="built_in">document</span>.body.click(); <span class="comment">// 模拟用户点击，发布消息</span></span><br></pre></td></tr></table></figure><p>在这里需要监控用户点击 document.body的动作，但是我们没办法预知用户将在什么时候点击。所以我们订阅 document.body 上的 click 事件，当 body 节点被点击时，body 节点便会向订阅者发布这个消息。这很像购房的例子，购房者不知道房子什么时候开售，于是他在订阅消息后等待售楼处发布消息。</p><h3 id="5-自定义事件-实现发布订阅模式"><a href="#5-自定义事件-实现发布订阅模式" class="headerlink" title="5. 自定义事件-实现发布订阅模式"></a>5. 自定义事件-实现发布订阅模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = &#123; <span class="comment">//封装发布订阅的功能</span></span><br><span class="line">clientList:[], <span class="comment">// 订阅者列表</span></span><br><span class="line">listen:<span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>)</span>&#123; <span class="comment">// 添加订阅者</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.clientList[key]) &#123;</span><br><span class="line"><span class="keyword">this</span>.clientList[key] = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.clientList[key].push(fn) <span class="comment">// 订阅的消息添加进缓存列表</span></span><br><span class="line">&#125;,</span><br><span class="line">remove:<span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;<span class="comment">//取消订阅者</span></span><br><span class="line"><span class="keyword">var</span> fns = <span class="keyword">this</span>.clientList[key];</span><br><span class="line"><span class="keyword">if</span>(!fns) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!fn) &#123;</span><br><span class="line">fns &amp;&amp; fns.length = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> l = fns.length - <span class="number">1</span>; l &gt;=<span class="number">0</span>; l-- )&#123; <span class="comment">// 反向遍历订阅的回调函数列表</span></span><br><span class="line"> <span class="keyword">var</span> _fn = fns[ l ]; </span><br><span class="line"> <span class="keyword">if</span> ( _fn === fn )&#123; </span><br><span class="line"> fns.splice( l, <span class="number">1</span> ); <span class="comment">// 删除订阅者的回调函数</span></span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">trigger:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call(argumets);</span><br><span class="line"><span class="keyword">var</span> fns = <span class="keyword">this</span>.clientList[key];</span><br><span class="line"><span class="keyword">if</span>(!fns || fns.length === <span class="number">0</span>) &#123;<span class="comment">//没有绑定对应的消息</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fns.length; i++) &#123;</span><br><span class="line"><span class="keyword">var</span> fn = fns[i];</span><br><span class="line">fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> installEvent = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123; <span class="comment">//给所有的对象都动态安装发布—订阅功能</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> event) &#123;</span><br><span class="line">obj[i] = event[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">installEvent( salesOffices ); </span><br><span class="line">salesOffices.listen( <span class="string">'squareMeter88'</span>, fn1 = <span class="function"><span class="keyword">function</span>(<span class="params"> price </span>)</span>&#123; <span class="comment">// 小明订阅88消息</span></span><br><span class="line"> <span class="built_in">console</span>.log( <span class="string">'小明received '</span> + price ); </span><br><span class="line">&#125;); </span><br><span class="line">salesOffices.listen( <span class="string">'squareMeter88'</span>, fn2 = <span class="function"><span class="keyword">function</span>(<span class="params"> price </span>)</span>&#123; <span class="comment">// 小红订阅88消息</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'小红received '</span> + price ); </span><br><span class="line">&#125;); </span><br><span class="line">salesOffices.listen( <span class="string">'squareMeter100'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> price </span>)</span>&#123; <span class="comment">// 小红订阅100消息</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'小红received '</span> + price ); </span><br><span class="line">&#125;); </span><br><span class="line">salesOffices.trigger( <span class="string">'squareMeter88'</span>, <span class="number">20000</span> ); <span class="comment">// 输出：小明received 20000, 小红received 20000</span></span><br><span class="line">salesOffices.trigger( <span class="string">'squareMeter100'</span>, <span class="number">30000</span> ); <span class="comment">// 输出：小红received 30000</span></span><br><span class="line">salesOffices.remove( <span class="string">'squareMeter88'</span>, fn1 ); <span class="comment">// 删除小明的订阅</span></span><br><span class="line">salesOffices.trigger( <span class="string">'squareMeter88'</span>, <span class="number">20000</span> ); <span class="comment">// 输出：小红received 20000</span></span><br></pre></td></tr></table></figure><h4 id="6-全局的发布－订阅对象"><a href="#6-全局的发布－订阅对象" class="headerlink" title="6. 全局的发布－订阅对象"></a>6. 全局的发布－订阅对象</h4><p>在5中每个发布者对象都添加了 listen 和 trigger 方法，以及一个缓存列表 clientList，这其实是一种资源浪费。当一个订阅者想要订阅另外一个对象消息时，也必须要创建一个新的对象。<br>类似现实中的房产中介，发布—订阅模式可以用一个全局的 Event 对象来实现，订阅者不需要了解消息来自哪个发布者，发布者也不知道消息会推送给哪些订阅者，Event 作为一个类似“中介者”的角色，把订阅者和发布者联系起来。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="keyword">var</span> clientList = &#123;&#125;, listen, trigger, remove;</span><br><span class="line">  listen = <span class="function"><span class="keyword">function</span>(<span class="params"> key, fn </span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (!clientList[ key ])&#123; </span><br><span class="line">    clientList[ key ] = []; </span><br><span class="line"> &#125; </span><br><span class="line"> clientList[ key ].push( fn ); </span><br><span class="line"> &#125;; </span><br><span class="line"> trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call( <span class="built_in">arguments</span> ), </span><br><span class="line"> fns = clientList[ key ]; </span><br><span class="line"> <span class="keyword">if</span> ( !fns || fns.length === <span class="number">0</span> )&#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>, fn; fn = fns[ i++ ]; )&#123; </span><br><span class="line"> fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ); </span><br><span class="line"> &#125; </span><br><span class="line"> &#125;; </span><br><span class="line"> remove = <span class="function"><span class="keyword">function</span>(<span class="params"> key, fn </span>)</span>&#123; </span><br><span class="line"> <span class="keyword">var</span> fns = clientList[ key ]; </span><br><span class="line"> <span class="keyword">if</span> ( !fns )&#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">if</span> ( !fn )&#123; </span><br><span class="line"> fns &amp;&amp; ( fns.length = <span class="number">0</span> ); </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; </span><br><span class="line"> <span class="keyword">for</span> ( <span class="keyword">var</span> l = fns.length - <span class="number">1</span>; l &gt;=<span class="number">0</span>; l-- )&#123; </span><br><span class="line"> <span class="keyword">var</span> _fn = fns[ l ]; </span><br><span class="line"> <span class="keyword">if</span> ( _fn === fn )&#123; </span><br><span class="line"> fns.splice( l, <span class="number">1</span> ); </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> &#125;; </span><br><span class="line"> <span class="keyword">return</span> &#123; </span><br><span class="line"> listen: listen, </span><br><span class="line"> trigger: trigger, </span><br><span class="line"> remove: remove </span><br><span class="line"> &#125; </span><br><span class="line"> &#125;)(); </span><br><span class="line"></span><br><span class="line">Event.listen( <span class="string">'squareMeter88'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> price </span>)</span>&#123; <span class="comment">// 小红订阅消息</span></span><br><span class="line"> <span class="built_in">console</span>.log( <span class="string">'价格= '</span> + price ); <span class="comment">// 输出：'价格=2000000' </span></span><br><span class="line">&#125;); </span><br><span class="line">Event.trigger( <span class="string">'squareMeter88'</span>, <span class="number">2000000</span> ); <span class="comment">// 售楼处发布消息</span></span><br></pre></td></tr></table></figure></p><h4 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h4><p>  发布—订阅模式的优点非常明显，一为时间上的解耦，二为对象之间的解耦。它的应用非常广泛，既可以用在异步编程中，也可以帮助我们完成更松耦合的代码编写。发布—订阅模式还可以用来帮助实现一些别的设计模式，比如中介者模式。从架构上来看，无论是 MVC 还是 MVVM，都少不了发布—订阅模式的参与，而且 JavaScript本身也是一门基于事件驱动的语言。<br>  当然，发布—订阅模式也不是完全没有缺点。创建订阅者本身要消耗一定的时间和内存，而且当你订阅一个消息后，也许此消息最后都未发生，但这个订阅者会始终存在于内存中。另外，发布—订阅模式虽然可以弱化对象之间的联系，但如果过度使用的话，对象和对象之间的必要联系也将被深埋在背后，会导致程序难以跟踪维护和理解。特别是有多个发布者和订阅者嵌套到一起的时候，要跟踪一个 bug 不是件轻松的事情</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-基本概念&quot;&gt;&lt;a href=&quot;#1-基本概念&quot; class=&quot;headerlink&quot; title=&quot;1. 基本概念&quot;&gt;&lt;/a&gt;1. 基本概念&lt;/h3&gt;&lt;p&gt;发布—订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/10/21/hello-world/"/>
    <id>http://yoursite.com/2018/10/21/hello-world/</id>
    <published>2018-10-21T02:44:29.433Z</published>
    <updated>2018-10-21T02:44:29.433Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
