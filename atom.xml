<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-14T14:27:10.209Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Daisy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浏览器关键渲染路径与阻塞渲染以及渲染优化</title>
    <link href="http://yoursite.com/2018/11/01/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%B3%E9%94%AE%E6%B8%B2%E6%9F%93%E8%B7%AF%E5%BE%84%E4%B8%8E%E9%98%BB%E5%A1%9E%E6%B8%B2%E6%9F%93%E4%BB%A5%E5%8F%8A%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2018/11/01/浏览器关键渲染路径与阻塞渲染以及渲染优化/</id>
    <published>2018-11-01T14:12:13.000Z</published>
    <updated>2019-07-14T14:27:10.209Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>  在浏览器拿到HTML, CSS JS 等外部资源到渲染出页面的过程，有一个重要的概念，例如为了保障首屏内容的最快速显示，通常会提到一个渐进式页面渲染，但是为了渐进式页面渲染，就需要做资源的拆分，那么以什么粒度拆分、要不要拆分，不同页面、不同场景策略不同。具体方案的确定既要考虑体验问题，也要考虑工程问题。了解原理可以让我们更好的优化关键渲染路径，从而获得更好的用户体验。</p><h3 id="2-阻塞资源"><a href="#2-阻塞资源" class="headerlink" title="2. 阻塞资源"></a>2. 阻塞资源</h3><p>现代浏览器总是并行加载资源，例如，当 HTML 解析器（HTML Parser）被脚本阻塞时，解析器虽然会停止构建 DOM，但仍会识别该脚本后面的资源，并进行预加载。<br>  同时由于：</p><pre><code>1. CSS 被视为渲染阻塞资源(包括JS)，这意味着浏览器将不会渲染任何已处理的内容，直至 CSSOM 构建完毕，才会进行下一阶段。2. JavaScript 被认为是解释器阻塞资源，HTML解析会被JS阻塞，它不仅可以读取和修改 DOM 属性，还可以读取和修改 CSSOM 属性</code></pre><p>  存在阻塞的 CSS 资源时，浏览器会延迟 JavaScript 的执行和 DOM 构建。另外：<br>    1.当浏览器遇到一个 script 标记时，DOM 构建将暂停，直至脚本完成执行。<br>    2.JavaScript 可以查询和修改 DOM 与 CSSOM。<br>    3.CSSOM 构建时，JavaScript 执行将暂停，直至 CSSOM 就绪。</p><p>  所以，script 标签的位置很重要。实际使用时，可以遵循下面两个原则：<br>    1.CSS 优先：引入顺序上，CSS 资源先于 JavaScript 资源。<br>    2.JavaScript 应尽量少影响 DOM 的构建。</p><h3 id="3-CSS加载"><a href="#3-CSS加载" class="headerlink" title="3. CSS加载"></a>3. CSS加载</h3><p>  1.<style> p { color: red; }</style><br>  <link rel="stylesheet" href="index.css"><br>  这样的 link 标签（无论是否 inline）会被视为阻塞渲染的资源，浏览器会优先处理这些 CSS 资源，直至 CSSOM 构建完毕。</p><p>2.渲染树（Render-Tree）的关键渲染路径中，要求同时具有 DOM 和 CSSOM，之后才会构建渲染树。即，HTML 和 CSS 都是阻塞渲染的资源。HTML 显然是必需的，因为包括我们希望显示的文本在内的内容，都在 DOM 中存放，那么可以从 CSS 上想办法。<br>  最容易想到的当然是精简 CSS 并尽快提供它。除此之外，还可以用媒体类型（media type）和媒体查询（media query）来解除对渲染的阻塞。<br>  <link href="index.css" rel="stylesheet"><br>  <link href="print.css" rel="stylesheet" media="print"><br>  <link href="other.css" rel="stylesheet" media="(min-width: 30em) and (orientation: landscape)"><br>  第一个资源会加载并阻塞。<br>  第二个资源设置了媒体类型，会加载但不会阻塞，print 声明只在打印网页时使用。<br>  第三个资源提供了媒体查询，会在符合条件时阻塞渲染。</p><p>  关于CSS加载的阻塞情况：<br>    1.css加载不会阻塞DOM树的解析<br>    2.css加载会阻塞DOM树的渲染<br>    3.css加载会阻塞后面js语句的执行<br>没有js的理想情况下，html与css会并行解析，分别生成DOM与CSSOM，然后合并成Render Tree，进入Rendering Pipeline；但如果有js，css加载会阻塞后面js语句的执行，而（同步）js脚本执行会阻塞其后的DOM解析（所以通常会把css放在头部，js放在body尾）</p><h3 id="4-JS加载"><a href="#4-JS加载" class="headerlink" title="4. JS加载"></a>4. JS加载</h3><p>  1.如果没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的HTML元素之前，也就是说不等待后续载入的HTML元素，读到就加载并执行</p><p>  2.解析过程中无论遇到的JavaScript是内联还是外链，只要浏览器遇到 script 标记，唤醒JavaScript解析器，就会进行暂停 (blocked )浏览器解析HTML，并等到 CSSOM 构建完毕，才去执行js脚本。因为脚本中可能会操作DOM元素，而如果在加载执行脚本的时候DOM元素并没有被解析，脚本就会因为DOM元素没有生成取不到响应元素，所以实际工程中，我们常常将资源放到文档底部。</p><ol start="3"><li><p>改变脚本加载次序defer与async<br>defer 与 async 可以改变之前的那些阻塞情形，这两个属性都会使 script 异步加载，然而执行的时机是不一样的。注意 async 与 defer 属性对于 inline-script 都是无效的<br>1.defer<br><script src="app1.js" defer></script><br><script src="app2.js" defer></script><br><script src="app3.js" defer></script><br>defer 属性表示延迟执行引入 JavaScript，即 JavaScript 加载时 HTML 并未停止解析，这两个过程是并行的。整个 document 解析完毕且 defer-script 也加载完成之后（这两件事情的顺序无关），会执行所有由 defer-script 加载的 JavaScript 代码，再触发DOMContentLoaded(初始的 HTML 文档被完全加载和解析完成之后触发，无需等待样式表图像和子框架的完成加载) 事件。</p><p>defer 不会改变 script 中代码的执行顺序，示例代码会按照 1、2、3 的顺序执行。所以，defer 与相比普通 script，有两点区别：载入 JavaScript 文件时不阻塞 HTML 的解析，执行阶段被放到 HTML 标签解析完成之后。</p><p>2.async<br>async 属性表示异步执行引入的 JavaScript，与 defer 的区别在于，如果已经加载好，就会开始执行，无论此刻是 HTML 解析阶段还是 DOMContentLoaded 触发(HTML解析完成事件)之后。需要注意的是，这种方式加载的 JavaScript 依然会阻塞 load 事件。换句话说，async-script 可能在 DOMContentLoaded 触发之前或之后执行，但一定在 load 触发之前执行。<br>从上一段也能推出，多个 async-script 的执行顺序是不确定的，谁先加载完谁执行。值得注意的是，向 document 动态添加 script 标签时，async 属性默认是 true。</p></li></ol><h3 id="5-优化渲染性能"><a href="#5-优化渲染性能" class="headerlink" title="5. 优化渲染性能"></a>5. 优化渲染性能</h3><p>  1.动画实现使用requestAnimationFrame</p><p>  2.长耗时的JS代码放到Web Worker 中执行<br>    JS代码运行在浏览器的主线程上，与此同时，浏览器的主线程还负责样式计算、布局、绘制的工作，如果JavaScript代码运行时间过长，就会阻塞其他渲染工作，很可能会导致丢帧。<br>    每帧的渲染应该在16ms内完成，但在动画过程中，由于已经被占用了不少时间，所以JavaScript代码运行耗时应该控制在3-4毫秒。<br>    如果真的有特别耗时且不操作DOM元素的纯计算工作，可以考虑放到Web Workers中执行。</p><p>  3.拆分操作DOM元素的任务，分别在多个frame完成<br>    由于Web Workers不能操作DOM元素的限制，所以只能做一些纯计算的工作，对于很多需要操作DOM元素的逻辑，可以考虑分步处理，把任务分为若干个小任务，每个任务都放到requestAnimationFrame中回调执行</p><p>  4.降低样式计算的范围和复杂度<br>    添加或移除一个DOM元素、修改元素属性和样式类、应用动画效果等操作，都会引起DOM结构的改变，从而导致浏览器要repaint或者reflow。那么这里可以采取一些措施。</p><pre><code>1. 降低样式选择器的复杂度尽量保持class的简短，或者使用Web Components框架。.box:nth-last-child(-n+1) .title {}// 改善后.final-box-title {}2. 减少需要执行样式计算的元素个数由于浏览器的优化，现代浏览器的样式计算直接对目标元素执行，而不是对整个页面执行，所以我们应该尽可能减少需要执行样式计算的元素的个数。</code></pre><p>  5.避免大规模、复杂的布局<br>    布局就是计算DOM元素的大小和位置的过程，如果你的页面中包含很多元素，那么计算这些元素的位置将耗费很长时间。布局的主要消耗在于：1. 需要布局的DOM元素的数量；2. 布局过程的复杂程度</p><pre><code>1. 尽可能避免触发布局  当你修改了元素的属性之后，浏览器将会检查为了使这个修改生效是否需要重新计算布局以及更新渲染树，对于DOM元素的几何属性修改，比如width/height/left/top等，都需要重新计算布局。对于不能避免的布局，可以使用Chrome DevTools工具的Timeline查看布局的耗时，以及受影响的DOM元素数量。2. 使用flexbox替代老的布局模型  老的布局模型以相对/绝对/浮动的方式将元素定位到屏幕上，而Floxbox布局模型用流式布局的方式将元素定位到屏幕上。通过一个小实验可以看出3. 避免强制同步布局事件的发生根据渲染流程，JS脚本是在layout之前执行，但是我们可以强制浏览器在执行JS脚本之前先执行布局过程，这就是所谓的强制同步布局。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">requestAnimationFrame(logBoxHeight);</span><br><span class="line"><span class="comment">// 先写后读，触发强制布局</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logBoxHeight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 更新box样式</span></span><br><span class="line">    box.classList.add(<span class="string">'super-big'</span>);</span><br><span class="line">    <span class="comment">// 为了返回box的offersetHeight值</span></span><br><span class="line">    <span class="comment">// 浏览器必须先应用属性修改，接着执行布局过程</span></span><br><span class="line">    <span class="built_in">console</span>.log(box.offsetHeight);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 先读后写，避免强制布局</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logBoxHeight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取box.offsetHeight</span></span><br><span class="line">    <span class="built_in">console</span>.log(box.offsetHeight);</span><br><span class="line">    <span class="comment">// 更新box样式</span></span><br><span class="line">    box.classList.add(<span class="string">'super-big'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在JS脚本运行的时候，它能获取到的元素样式属性值都是上一帧画面的，都是旧的值。因此，如果你在当前帧获取属性之前又对元素节点有改动，那就会导致浏览器必须先应用属性修改，结果执行布局过程，最后再执行JS逻辑。4.避免连续的强制同步布局发生如果连续快速的多次触发强制同步布局，那么结果更糟糕。比如下面的例子，获取box的属性，设置到paragraphs上，由于每次设置paragraphs都会触发样式计算和布局过程，而下一次获取box的属性必须等到上一步设置结束之后才能触发。 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resizeWidth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 会让浏览器陷入'读写读写'循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; paragraphs.length; i++) &#123;</span><br><span class="line">        paragraphs[i].style.width = box.offsetWidth + <span class="string">'px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改善后方案</span></span><br><span class="line"><span class="keyword">var</span> width = box.offsetWidth;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resizeWidth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; paragraphs.length; i++) &#123;</span><br><span class="line">        paragraphs[i].style.width = width + <span class="string">'px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>5.简化绘制的复杂度、减少绘制区域  Paint就是填充像素的过程，通常这个过程是整个渲染流程中耗时最长的一环，因此也是最需要避免发生的一环。  如果Layout被触发，那么接下来元素的Paint一定会被触发。当然纯粹改变元素的非几何属性，也可能会触发Paint，比如背景、文字颜色、阴影效果等。  1. 提升移动或渐变元素的绘制层  绘制并非总是在内存中的单层画面里完成的，实际上，浏览器在必要时会将一帧画面绘制成多层画面，然后将这若干层画面合并成一张图片显示到屏幕上。  这种绘制方式的好处是，使用transform来实现移动效果的元素将会被正常绘制，同时不会触发其他元素的绘制。  2. 减少绘制区域，简化绘制的复杂度  浏览器会把相邻区域的渲染任务合并在一起进行，所以需要对动画效果进行精密设计，以保证各自的绘制区域不会有太多重叠。  另外可以实现同样效果的不同方式，应该采用性能更好的那种。  3. 通过Chrome DevTools来分析绘制复杂度和时间消耗，尽可能降低这些指标  打开DevTools，在弹出的面板中，选中More Tools &gt; Rendering选项卡下的Paint flashing，这样每当页面发生绘制的时候，屏幕就会闪现绿色的方框。通过该工具可以检查Paint发生的区域和时机是不是可以被优化。  通过Chrome DevTools中的Timeline &gt; Paint选项可以查看更细节的Paint信息6.优先使用渲染层合并属性、控制层数量  1. 使用transform/opacity实现动画效果  使用transform/opacity实现动画效果，会跳过渲染流程的布局和绘制环节，只做渲染层的合并。  Type  Func  Position  transform: translate(-px,-px)  Scale transform: scale(-)  Rotation  transform: rotate(-deg)  Skew  transform: skew(X/Y)(-deg)  Matrix  transform: matrix(3d)(..)  Opacity opacity: 0-1  使用transform/opacity的元素必须独占一个渲染层，所以必须提升该元素到单独的渲染层。  2. 提升动画效果中的元素  应用动画效果的元素应该被提升到其自有的渲染层，但不要滥用。  在页面中创建一个新的渲染层最好的方式就是使用CSS属性will-change，对于目前还不支持will-change属性、但支持创建渲染层的浏览器，可以通过3D transform属性来强制浏览器创建一个新的渲染层。需要注意的是，不要创建过多的渲染层，这意味着新的内存分配和更复杂的层管理。  注意，IE11，Edge17都不支持这一属性。  .moving-element {      will-change: transform;      transform: translateZ(0);  }  3. 管理渲染层、避免过多数量的层  尽管提升渲染层看起来很诱人，但不能滥用，因为更多的渲染层意味着更多的额外的内存和管理资源，所以当且仅当需要的时候才为元素创建渲染层。  * {    will-change: transform;    transform: translateZ(0);  }  4. 使用Chrome DevTools来了解页面的渲染层情况  开启Timeline &gt; Paint选项，然后录制一段时间的操作，选择单独的帧，看到每个帧的渲染细节，在ESC弹出框有个Layers选项，可以看到渲染层的细节，有多少渲染层，为何被创建？8. 对用户输入事件的处理函数去抖动（移动设备）用户输入事件处理函数会在运行时阻塞帧的渲染，并且会导致额外的布局发生。  1. 避免使用运行时间过长的输入事件处理函数  理想情况下，当用户和页面交互，页面的渲染层合并线程将接收到这个事件并移动元素。这个响应过程是不需要主线程参与，不会导致JavaScript、布局和绘制过程发生。  但是如果被触摸的元素绑定了输入事件处理函数，比如touchstart/touchmove/touchend，那么渲染层合并线程必须等待这些被绑定的处理函数执行完毕才能执行，也就是用户的滚动页面操作被阻塞了，表现出的行为就是滚动出现延迟或者卡顿。  简而言之就是你必须确保用户输入事件绑定的任何处理函数都能够快速的执行完毕，以便腾出时间来让渲染层合并线程完成他的工作。  2. 避免在输入事件处理函数中修改样式属性  输入事件处理函数，比如scroll/touch事件的处理，都会在requestAnimationFrame之前被调用执行。  因此，如果你在上述输入事件的处理函数中做了修改样式属性的操作，那么这些操作就会被浏览器暂存起来，然后在调用requestAnimationFrame的时候，如果你在一开始就做了读取样式属性的操作，那么将会触发浏览器的强制同步布局操作。  3. 对滚动事件处理函数去抖动  通过requestAnimationFrame可以对样式修改操作去抖动，同时也可以使你的事件处理函数变得更轻  ```javascript  function onScroll(evt) {      // Store the scroll value for laterz.      lastScrollY = window.scrollY;      // Prevent multiple rAF callbacks.      if (scheduledAnimationFrame) {          return;      }      scheduledAnimationFrame = true;      requestAnimationFrame(readAndUpdatePage);  }  window.addEventListener(&apos;scroll&apos;, onScroll);   ```javascript </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h3&gt;&lt;p&gt;  在浏览器拿到HTML, CSS JS 等外部资源到渲染出页面的过程，有一个重要的概念，例如为了保障首屏内容的最快速显
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="浏览器" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之发布订阅模式</title>
    <link href="http://yoursite.com/2018/10/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/10/28/设计模式之发布订阅模式/</id>
    <published>2018-10-28T13:44:56.000Z</published>
    <updated>2019-07-14T13:58:22.044Z</updated>
    
    <content type="html"><![CDATA[<p>###1. 基本概念<br>发布—订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。在 JavaScript 开发中，我们一般用事件模型来替代传统的发布—订阅模式。</p><h3 id="2-现实例子"><a href="#2-现实例子" class="headerlink" title="2. 现实例子"></a>2. 现实例子</h3><p>买房者订阅售楼处房产消息，当有新的楼盘推出时，售楼处会一一向已订阅的买房者发送消息，无需买房者每天来咨询是否有新的楼盘，售楼处也无需关注买房者的任何情况，只是负责发送消息。</p><h3 id="3-特点"><a href="#3-特点" class="headerlink" title="3. 特点"></a>3. 特点</h3><p>从上面的例子中可以看出使用发布—订阅模式有着显而易见的优点。</p><blockquote><ul><li>购房者不用再天天给售楼处打电话咨询开售时间，在合适的时间点，售楼处作为发布者会通知这些消息订阅者。这一点说明发布—订阅模式可以广泛应用于异步编程中，这是一种替代传递回调函数的方案。比如，我们可以订阅 ajax 请求的 error、success等事件。在异步编程中使用发布—订阅模式，我们就无需过多关注对象在异步运行期间的内部状态，而只需要订阅感兴趣的事件发生点。</li><li>购房者和售楼处之间不再强耦合在一起，当有新的购房者出现时，他只需把联系方式留在售楼处，售楼处不关心购房者的任何情况只要售楼处记得发短信这件事情。这说明发布—订阅模式可以取代对象之间硬编码的通知机制，一个对象不用再显式地调用另外一个对象的某个接口。发布—订阅模式让两个对象松耦合地联系在一起，虽然不太清楚彼此的细节，但这不影响它们之间相互通信。当有新的订阅者出现时，发布者的代码不需要任何修改；同样发布者需要改变时，也不会影响到之前的订阅者。只要之前约定的事件名没有变化，就可以自由地改变它们。</li></ul></blockquote><h3 id="4-js事件机制中的发布订阅模式"><a href="#4-js事件机制中的发布订阅模式" class="headerlink" title="4. js事件机制中的发布订阅模式"></a>4. js事件机制中的发布订阅模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener( <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//订阅消息 </span></span><br><span class="line">    alert(<span class="number">2</span>); </span><br><span class="line">&#125;, <span class="literal">false</span> ); </span><br><span class="line"><span class="built_in">document</span>.body.click(); <span class="comment">// 模拟用户点击，发布消息</span></span><br></pre></td></tr></table></figure><p>在这里需要监控用户点击 document.body的动作，但是我们没办法预知用户将在什么时候点击。所以我们订阅 document.body 上的 click 事件，当 body 节点被点击时，body 节点便会向订阅者发布这个消息。这很像购房的例子，购房者不知道房子什么时候开售，于是他在订阅消息后等待售楼处发布消息。</p><h3 id="5-自定义事件-实现发布订阅模式"><a href="#5-自定义事件-实现发布订阅模式" class="headerlink" title="5. 自定义事件-实现发布订阅模式"></a>5. 自定义事件-实现发布订阅模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = &#123; <span class="comment">//封装发布订阅的功能</span></span><br><span class="line">    clientList:[], <span class="comment">// 订阅者列表</span></span><br><span class="line">listen:<span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>)</span>&#123; <span class="comment">// 添加订阅者</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.clientList[key]) &#123;</span><br><span class="line"><span class="keyword">this</span>.clientList[key] = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.clientList[key].push(fn) <span class="comment">// 订阅的消息添加进缓存列表</span></span><br><span class="line">&#125;,</span><br><span class="line">remove:<span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;<span class="comment">//取消订阅者</span></span><br><span class="line"><span class="keyword">var</span> fns = <span class="keyword">this</span>.clientList[key];</span><br><span class="line"><span class="keyword">if</span>(!fns) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!fn) &#123;</span><br><span class="line">fns &amp;&amp; fns.length = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> l = fns.length - <span class="number">1</span>; l &gt;=<span class="number">0</span>; l-- )&#123; <span class="comment">// 反向遍历订阅的回调函数列表</span></span><br><span class="line"> <span class="keyword">var</span> _fn = fns[ l ]; </span><br><span class="line"> <span class="keyword">if</span> ( _fn === fn )&#123; </span><br><span class="line"> fns.splice( l, <span class="number">1</span> ); <span class="comment">// 删除订阅者的回调函数</span></span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">trigger:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call(argumets);</span><br><span class="line"><span class="keyword">var</span> fns = <span class="keyword">this</span>.clientList[key];</span><br><span class="line"><span class="keyword">if</span>(!fns || fns.length === <span class="number">0</span>) &#123;<span class="comment">//没有绑定对应的消息</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fns.length; i++) &#123;</span><br><span class="line"><span class="keyword">var</span> fn = fns[i];</span><br><span class="line">fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> installEvent = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123; <span class="comment">//给所有的对象都动态安装发布—订阅功能</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> event) &#123;</span><br><span class="line">obj[i] = event[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">installEvent( salesOffices ); </span><br><span class="line">salesOffices.listen( <span class="string">'squareMeter88'</span>, fn1 = <span class="function"><span class="keyword">function</span>(<span class="params"> price </span>)</span>&#123; <span class="comment">// 小明订阅88消息</span></span><br><span class="line"> <span class="built_in">console</span>.log( <span class="string">'小明received '</span> + price ); </span><br><span class="line">&#125;); </span><br><span class="line">salesOffices.listen( <span class="string">'squareMeter88'</span>, fn2 = <span class="function"><span class="keyword">function</span>(<span class="params"> price </span>)</span>&#123; <span class="comment">// 小红订阅88消息</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'小红received '</span> + price ); </span><br><span class="line">&#125;); </span><br><span class="line">salesOffices.listen( <span class="string">'squareMeter100'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> price </span>)</span>&#123; <span class="comment">// 小红订阅100消息</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'小红received '</span> + price ); </span><br><span class="line">&#125;); </span><br><span class="line">salesOffices.trigger( <span class="string">'squareMeter88'</span>, <span class="number">20000</span> ); <span class="comment">// 输出：小明received 20000, 小红received 20000</span></span><br><span class="line">salesOffices.trigger( <span class="string">'squareMeter100'</span>, <span class="number">30000</span> ); <span class="comment">// 输出：小红received 30000</span></span><br><span class="line">salesOffices.remove( <span class="string">'squareMeter88'</span>, fn1 ); <span class="comment">// 删除小明的订阅</span></span><br><span class="line">salesOffices.trigger( <span class="string">'squareMeter88'</span>, <span class="number">20000</span> ); <span class="comment">// 输出：小红received 20000</span></span><br></pre></td></tr></table></figure><h4 id="6-全局的发布－订阅对象"><a href="#6-全局的发布－订阅对象" class="headerlink" title="6. 全局的发布－订阅对象"></a>6. 全局的发布－订阅对象</h4><p>在5中每个发布者对象都添加了 listen 和 trigger 方法，以及一个缓存列表 clientList，这其实是一种资源浪费。当一个订阅者想要订阅另外一个对象消息时，也必须要创建一个新的对象。<br>类似现实中的房产中介，发布—订阅模式可以用一个全局的 Event 对象来实现，订阅者不需要了解消息来自哪个发布者，发布者也不知道消息会推送给哪些订阅者，Event 作为一个类似“中介者”的角色，把订阅者和发布者联系起来。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="keyword">var</span> clientList = &#123;&#125;, listen, trigger, remove;</span><br><span class="line">  listen = <span class="function"><span class="keyword">function</span>(<span class="params"> key, fn </span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (!clientList[ key ])&#123; </span><br><span class="line">    clientList[ key ] = []; </span><br><span class="line"> &#125; </span><br><span class="line"> clientList[ key ].push( fn ); </span><br><span class="line"> &#125;; </span><br><span class="line"> trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call( <span class="built_in">arguments</span> ), </span><br><span class="line"> fns = clientList[ key ]; </span><br><span class="line"> <span class="keyword">if</span> ( !fns || fns.length === <span class="number">0</span> )&#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>, fn; fn = fns[ i++ ]; )&#123; </span><br><span class="line"> fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ); </span><br><span class="line"> &#125; </span><br><span class="line"> &#125;; </span><br><span class="line"> remove = <span class="function"><span class="keyword">function</span>(<span class="params"> key, fn </span>)</span>&#123; </span><br><span class="line"> <span class="keyword">var</span> fns = clientList[ key ]; </span><br><span class="line"> <span class="keyword">if</span> ( !fns )&#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">if</span> ( !fn )&#123; </span><br><span class="line"> fns &amp;&amp; ( fns.length = <span class="number">0</span> ); </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; </span><br><span class="line"> <span class="keyword">for</span> ( <span class="keyword">var</span> l = fns.length - <span class="number">1</span>; l &gt;=<span class="number">0</span>; l-- )&#123; </span><br><span class="line"> <span class="keyword">var</span> _fn = fns[ l ]; </span><br><span class="line"> <span class="keyword">if</span> ( _fn === fn )&#123; </span><br><span class="line"> fns.splice( l, <span class="number">1</span> ); </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> &#125;; </span><br><span class="line"> <span class="keyword">return</span> &#123; </span><br><span class="line"> listen: listen, </span><br><span class="line"> trigger: trigger, </span><br><span class="line"> remove: remove </span><br><span class="line"> &#125; </span><br><span class="line"> &#125;)(); </span><br><span class="line"></span><br><span class="line">Event.listen( <span class="string">'squareMeter88'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> price </span>)</span>&#123; <span class="comment">// 小红订阅消息</span></span><br><span class="line"> <span class="built_in">console</span>.log( <span class="string">'价格= '</span> + price ); <span class="comment">// 输出：'价格=2000000' </span></span><br><span class="line">&#125;); </span><br><span class="line">Event.trigger( <span class="string">'squareMeter88'</span>, <span class="number">2000000</span> ); <span class="comment">// 售楼处发布消息</span></span><br></pre></td></tr></table></figure></p><h4 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h4><p>发布—订阅模式的优点非常明显，一为时间上的解耦，二为对象之间的解耦。它的应用非常广泛，既可以用在异步编程中，也可以帮助我们完成更松耦合的代码编写。发布—订阅模式还可以用来帮助实现一些别的设计模式，比如中介者模式。从架构上来看，无论是 MVC 还是 MVVM，都少不了发布—订阅模式的参与，而且 JavaScript本身也是一门基于事件驱动的语言。<br>当然，发布—订阅模式也不是完全没有缺点。创建订阅者本身要消耗一定的时间和内存，而且当你订阅一个消息后，也许此消息最后都未发生，但这个订阅者会始终存在于内存中。另外，发布—订阅模式虽然可以弱化对象之间的联系，但如果过度使用的话，对象和对象之间的必要联系也将被深埋在背后，会导致程序难以跟踪维护和理解。特别是有多个发布者和订阅者嵌套到一起的时候，要跟踪一个 bug 不是件轻松的事情。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###1. 基本概念&lt;br&gt;发布—订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。在 JavaScript 开发中，我们一般用事件模型来替代传统的发布—订阅模式。&lt;/p&gt;
&lt;h3 id=&quot;2-现实例子&quot;
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/10/21/hello-world/"/>
    <id>http://yoursite.com/2018/10/21/hello-world/</id>
    <published>2018-10-21T02:44:29.433Z</published>
    <updated>2018-10-21T02:44:29.433Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
